(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{448:function(e,r,t){"use strict";t.r(r);var v=t(31),_=Object(v.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"web性能优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#web性能优化"}},[e._v("#")]),e._v(" Web性能优化")]),e._v(" "),r("h2",{attrs:{id:"浏览器渲染流程和阻塞"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染流程和阻塞"}},[e._v("#")]),e._v(" 浏览器渲染流程和阻塞")]),e._v(" "),r("h3",{attrs:{id:"浏览器渲染流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染流程"}},[e._v("#")]),e._v(" 浏览器渲染流程")]),e._v(" "),r("p",[e._v("通过Chrome的开发者工具 的 performance 的查看event Log，流程有下面这些：")]),e._v(" "),r("ol",[r("li",[e._v("Loading")]),e._v(" "),r("li",[e._v("parseHTML")]),e._v(" "),r("li",[e._v("recalculate style")]),e._v(" "),r("li",[e._v("layout")]),e._v(" "),r("li",[e._v("paint")]),e._v(" "),r("li",[e._v("composite layer")])]),e._v(" "),r("p",[e._v("网页请求从 HTML 文件请求开始。服务器返回 HTML -- 响应头和数据。然后浏览器开始解析 HTML，转换收到的数据为 DOM 树。浏览器每次发现外部资源就初始化请求，无论是样式、脚本或者嵌入的图片引用。有时请求会阻塞，这意味着解析剩下的 HTML 会被终止直到重要的资源被处理。浏览器接着解析 HTML，发请求和构造 DOM 直到文件结尾 ，这时开始构造 CSS对象模型。等到 DOM 和 CSSOM 完成之后，浏览器构造渲染树，计算所有可见内容的样式。一旦渲染树完成布局开始，定义所有渲染树元素的位置和大小。完成之后，页面被渲染完成，或者说是绘制到屏幕上。")]),e._v(" "),r("h3",{attrs:{id:"关键渲染路径-the-critical-rendering-path-简称-crp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关键渲染路径-the-critical-rendering-path-简称-crp"}},[e._v("#")]),e._v(" 关键渲染路径（The Critical Rendering Path，简称 CRP ）")]),e._v(" "),r("p",[e._v("关键渲染路径是指浏览器通过把 HTML、CSS 和 JavaScript 转化成屏幕上的像素的步骤顺序，也就是渲染流程。关键渲染路径包含了 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model",target:"_blank",rel:"noopener noreferrer"}},[e._v("Document Object Model "),r("OutboundLink")],1),e._v("(DOM)，"),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/CSS_Object_Model",target:"_blank",rel:"noopener noreferrer"}},[e._v("CSS Object Model "),r("OutboundLink")],1),e._v("(CSSOM)，渲染树和布局。")]),e._v(" "),r("p",[e._v("优化关键渲染路径可以提升首屏渲染时间。理解和优化关键渲染路径对于确保回流和重绘可以每秒 60 帧、确保高性能的用户交互和避免无意义渲染至关重要。")]),e._v(" "),r("h4",{attrs:{id:"css-样式引入"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#css-样式引入"}},[e._v("#")]),e._v(" css 样式引入")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("style 样式（内联样式）")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("HTML 解析器解析")])]),e._v(" "),r("li",[r("p",[e._v("不阻塞 DOM 解析")])]),e._v(" "),r("li",[r("p",[e._v("不阻塞页面渲染")])]),e._v(" "),r("li",[r("p",[e._v("可能会造成页面闪屏")])])])]),e._v(" "),r("li",[r("p",[e._v("link引入（外联样式）")]),e._v(" "),r("ul",[r("li",[e._v("CSS 解析器解析")]),e._v(" "),r("li",[e._v("不阻塞 DOM 解析")]),e._v(" "),r("li",[e._v("阻塞页面渲染（解决页面闪屏）")]),e._v(" "),r("li",[e._v("阻塞后续 JS 代码执行")])]),e._v(" "),r("p",[e._v("因为等待获取CSS不会阻塞HTML的解析或者下载，但是它的确阻塞JavaScript，因为JavaScript经常用于查询元素的CSS属性。")])])]),e._v(" "),r("h4",{attrs:{id:"js-引入"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js-引入"}},[e._v("#")]),e._v(" JS 引入")]),e._v(" "),r("p",[e._v("浏览器遇到 JS 就会停下来执行 JS 代码，不管是以script写脚本还会引入脚本文件，这时就会阻塞 DOM 解析、页面渲染和后续 JS 执行。")]),e._v(" "),r("p",[e._v("因为 JS 可操作DOM，所以DOM 解析会受到影响，进而影响页面渲染。")]),e._v(" "),r("p",[e._v("JS引擎 是单线程的，所以会影响后续 JS 执行。")]),e._v(" "),r("h3",{attrs:{id:"阻塞渲染"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#阻塞渲染"}},[e._v("#")]),e._v(" 阻塞渲染")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("css阻塞")]),e._v(" "),r("p",[e._v("主要是以 link 方式引入 style 文件，会引发 CSS 阻塞，主要体现：")]),e._v(" "),r("ul",[r("li",[e._v("不阻塞DOM 解析，")]),e._v(" "),r("li",[e._v("阻塞页面渲染，")]),e._v(" "),r("li",[e._v("阻塞后续的 JS 的执行。")])]),e._v(" "),r("p",[e._v("原因：")]),e._v(" "),r("p",[e._v("因为 CSS 解析器在 CSS 文件完整下载后，就会开始执行 CSS 解析，此时渲染进程就会等待CSS 解析完后才开始渲染页面。但是 不影响 DOM 解析。")]),e._v(" "),r("p",[e._v("优化：核心是优化 CSS 的传送")]),e._v(" "),r("ul",[r("li",[e._v("使用 CDN 节点进行外部资源加速")]),e._v(" "),r("li",[e._v("压缩 CSS 文件（使用webpack\\gulp 等打包工具），减少文件的大小")]),e._v(" "),r("li",[e._v("减少 http 请求，也就是减少请求的文件个数")]),e._v(" "),r("li",[e._v("优化 CSS 样式表，避免写内部样式"),r("code",[e._v("<p style='..'>")]),e._v(" ,避免不必要的代码重复")])])]),e._v(" "),r("li",[r("p",[e._v("JS 阻塞")]),e._v(" "),r("ul",[r("li",[e._v("阻塞 DOM 解析")]),e._v(" "),r("li",[e._v("阻塞页面渲染")]),e._v(" "),r("li",[e._v("阻塞后续 JS执行")])]),e._v(" "),r("p",[e._v("原因：")]),e._v(" "),r("p",[e._v("因为 JS 可操作DOM，所以当解析器遇到脚本，就会停止解析 HTML，而去执行 JS 脚本，进而影响页面渲染。对于外部脚本，还会强制解析器等待相应资源下载完毕（这可能会产生一次或多次网络往返过程并导致网页的首次呈现时间延迟）。")]),e._v(" "),r("p",[e._v("JS引擎 是单线程的，所以会影响后续 JS 执行。")]),e._v(" "),r("p",[e._v("优化：核心是移除会阻止内容呈现的 JS")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("内嵌javascript")]),e._v(" "),r("p",[e._v("若 js 脚本较小，则可以内嵌脚本到 HTML，以减少网络请求延迟")])]),e._v(" "),r("li",[r("p",[e._v("异步加载JavaScript")]),e._v(" "),r("p",[e._v("默认情况下，脚本会让浏览器停止 DOM 解析，为防止 JavaScript 阻止解析器正常运行，对外部脚本使用 HTML "),r("code",[e._v("async")]),e._v(" 属性。")]),e._v(" "),r("p",[r("code",[e._v("<script async src='....js'><\/script>")])]),e._v(" "),r("p",[e._v("但是要注意 async下载脚本并不按指定顺序下载，所以加入依赖关系的脚本则慎用 "),r("code",[e._v("async")]),e._v("。")])]),e._v(" "),r("li",[r("p",[e._v("延迟加载 JavaScript")]),e._v(" "),r("p",[e._v("如果某些脚本对于网页初次呈现没什么影响，则可将这部分脚本延迟到网页展示完后加载，这样做有助于减少资源争用并提高性能。使用 HTML "),r("code",[e._v("defer")]),e._v(" 属性。"),r("code",[e._v("defer")]),e._v("表示脚本将在 HTML解析完后，但在 "),r("code",[e._v("DOMContentLoaded")]),e._v(" 前触发。")]),e._v(" "),r("p",[r("code",[e._v("<script defer src='....js'><\/script>")])])])]),e._v(" "),r("h3",{attrs:{id:"重排重绘"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重排重绘"}},[e._v("#")]),e._v(" 重排重绘")])])]),e._v(" "),r("h2",{attrs:{id:"web性能优化-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#web性能优化-2"}},[e._v("#")]),e._v(" Web性能优化")]),e._v(" "),r("h3",{attrs:{id:"web-性能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#web-性能"}},[e._v("#")]),e._v(" Web 性能")]),e._v(" "),r("p",[e._v("Web 性能是客观的衡量标准，是用户对加载时间和运行时的直观体验。Web 性能指页面加载到可交互和可响应所消耗的时间，以及页面在交互时的流畅度——滚动是否顺滑？按钮能否点击？弹窗能否快速打开，动画是否平滑？")]),e._v(" "),r("p",[e._v("Web 性能既包括客观的度量如加载时间，每秒帧数和到页面可交互的时间；也包括用户的对页面内容加载时间的主观感觉。")]),e._v(" "),r("h3",{attrs:{id:"web-性能关键指标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#web-性能关键指标"}},[e._v("#")]),e._v(" web 性能关键指标")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("首屏加载时间")]),e._v(" "),r("p",[e._v("从用户请求打开新网页到浏览器呈现出首屏内容所用的时间。")])]),e._v(" "),r("li",[r("p",[e._v("完整网页加载时间")]),e._v(" "),r("p",[e._v("从用户请求打开新网页到浏览器完全呈现出相应网页所用的时间。")])])]),e._v(" "),r("h3",{attrs:{id:"影响-web性能的因素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#影响-web性能的因素"}},[e._v("#")]),e._v(" 影响 web性能的因素")]),e._v(" "),r("ul",[r("li",[e._v("阻碍呈现的往返次数：加载"),r("a",{attrs:{href:"https://developers.google.com/speed/docs/insights/BlockingJS",target:"_blank",rel:"noopener noreferrer"}},[e._v("阻碍呈现的资源"),r("OutboundLink")],1),e._v("所需的往返次数，主要是指网络请求次数。")]),e._v(" "),r("li",[e._v("响应大小：响应的总体大小，包括 HTML 主要资源和所有子资源。可通过压缩或者分块减少文件大小。")])]),e._v(" "),r("h3",{attrs:{id:"常见-web-性能优化方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见-web-性能优化方法"}},[e._v("#")]),e._v(" 常见 web 性能优化方法")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("优化关键渲染路径")]),e._v(" "),r("p",[e._v("提升页面加载速度需要通过被加载资源的优先级、控制它们加载的顺序和减小这些资源的体积。性能提示包含 1）通过异步重要资源的下载来减小请求数量，2）优化必须的请求数量和每个请求的文件体积，3）通过区分关键资源的优先级来优化被加载关键资源的顺序，来缩短关键路径长度。")]),e._v(" "),r("p",[e._v("重排重绘优化\n1.元素位置移动变换时尽量使用CSS3的transform来代替对top left等的操作\n变换（transform）和透明度（opacity）的改变仅仅影响图层的组合\n2.【使用opacity来代替visibility】\n(1).使用visibility不触发重排，但是依然重绘。\n(2).直接使用opacity即触发重绘，又触发重排（GPU底层设计如此！）。\n(3).opacity配合图层使用，即不触发重绘也不触发重排。\n原因：\n透明度的改变时，GPU在绘画时只是简单的降低之前已经画好的纹理的alpha值来达到效果，并不需要整体的重绘。\n不过这个前提是这个被修改opacity本身必须是一个图层。")])]),e._v(" "),r("li",[r("p",[e._v("节流和防抖")])]),e._v(" "),r("li",[r("p",[e._v("减少 阻碍呈现的往返次数")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://developers.google.com/speed/docs/insights/AvoidRedirects",target:"_blank",rel:"noopener noreferrer"}},[e._v("避免着陆页重定向"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developers.google.com/speed/docs/insights/BlockingJS",target:"_blank",rel:"noopener noreferrer"}},[e._v("清除阻碍呈现的 JavaScript 和 CSS 内容"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developers.google.com/speed/docs/insights/LeverageBrowserCaching",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用浏览器缓存"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developers.google.com/speed/docs/insights/PrioritizeVisibleContent",target:"_blank",rel:"noopener noreferrer"}},[e._v("优先加载可见内容"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developers.google.com/speed/docs/insights/Server",target:"_blank",rel:"noopener noreferrer"}},[e._v("缩短服务器响应时间"),r("OutboundLink")],1)])])]),e._v(" "),r("li",[r("p",[e._v("减少响应大小")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://developers.google.com/speed/docs/insights/EnableCompression",target:"_blank",rel:"noopener noreferrer"}},[e._v("启用压缩功能"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developers.google.com/speed/docs/insights/MinifyResources",target:"_blank",rel:"noopener noreferrer"}},[e._v("缩减资源大小"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developers.google.com/speed/docs/insights/OptimizeImages",target:"_blank",rel:"noopener noreferrer"}},[e._v("优化图片"),r("OutboundLink")],1)])])])]),e._v(" "),r("p",[e._v("参考：")]),e._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"https://developers.google.com/speed/docs/insights/about",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google dev | PageSpeed Insights "),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Performance",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN | Web 性能"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://blog.fundebug.com/2019/01/03/understand-browser-rendering/",target:"_blank",rel:"noopener noreferrer"}},[e._v("浏览器怎么工作"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://css-tricks.com/debouncing-throttling-explained-examples/",target:"_blank",rel:"noopener noreferrer"}},[e._v("节流和防抖的区别"),r("OutboundLink")],1)])]),e._v(" "),r("Vssue",{attrs:{title:"我是一个Issue"}})],1)}),[],!1,null,null,null);r.default=_.exports}}]);