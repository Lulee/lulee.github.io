(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{427:function(e,t,a){e.exports=a.p+"assets/img/image-20201017173859987.f7a1c500.png"},428:function(e,t,a){e.exports=a.p+"assets/img/image-20201017174052159.b6f626a4.png"},456:function(e,t,a){"use strict";a.r(t);var r=a(31),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"前端面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端面试题"}},[e._v("#")]),e._v(" 前端面试题")]),e._v(" "),t("h3",{attrs:{id:"_1-箭头函数不适合的场景有哪些-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-箭头函数不适合的场景有哪些-为什么"}},[e._v("#")]),e._v(" 1. 箭头函数不适合的场景有哪些，为什么？")]),e._v(" "),t("ul",[t("li",[e._v("不适合做对象的方法")]),e._v(" "),t("li",[e._v("不能作为构造函数")]),e._v(" "),t("li",[e._v("不能定义原型方法")])]),e._v(" "),t("p",[e._v("因为箭头函数不绑定 this，以上场景都需要动态绑定 this，所以不适合使用箭头函数。")]),e._v(" "),t("h3",{attrs:{id:"_2-this-作用场景哪些-并分别指代什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-this-作用场景哪些-并分别指代什么"}},[e._v("#")]),e._v(" 2. this 作用场景哪些，并分别指代什么？")]),e._v(" "),t("ul",[t("li",[e._v("默认绑定，非严格模式，this 执行 window, 严格模式，this 指向 undefined")]),e._v(" "),t("li",[e._v("对象的方法，this指向对象")]),e._v(" "),t("li",[e._v("构造函数，this 指向实例对象")]),e._v(" "),t("li",[e._v("显示绑定，call,bind，apply 方法显示指定 this")])]),e._v(" "),t("h3",{attrs:{id:"_3-promise-是什么-有哪些特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-promise-是什么-有哪些特点"}},[e._v("#")]),e._v(" 3. promise 是什么，有哪些特点？")]),e._v(" "),t("p",[e._v("Promise 是异步编程的一种解决方案，简单说是一个容易，保存着某个未来结束的事件的结果。promise 是一个对象，有两个特点：")]),e._v(" "),t("ol",[t("li",[e._v("Promise对象的状态不受外界影响。promise 对象有三种状态：pending（进行中），fulfilled（已成功），rejected（已失败）。")]),e._v(" "),t("li",[e._v("一旦状态改变，就不会再变，任何时候都可以得到这个结果。promise对象的状态改变只有两种可能，从pending 到 fulfilled，从 pending到 rejected.")])]),e._v(" "),t("p",[e._v("Promise的缺点：")]),e._v(" "),t("ol",[t("li",[e._v("无法取消 promise，一旦创建成功就会立即执行，无法中途取消。")]),e._v(" "),t("li",[e._v("如果不设置回调函数，promise 内部抛出的错误不会反映到外部。")]),e._v(" "),t("li",[e._v("当处于 pending 状态，无法得知进度。")])]),e._v(" "),t("h3",{attrs:{id:"_4-mvvm-和-mvc-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-mvvm-和-mvc-的区别"}},[e._v("#")]),e._v(" 4.MVVM 和 MVC 的区别")]),e._v(" "),t("p",[e._v("MVC模式在概念上强调 Model, View, Controller 的分离，各个模块也遵循着由 Controller 来处理消息，含事件响应，Model 掌管数据源，View 负责资料显示的职责分离原则。")]),e._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:a(427),alt:"image-20201017173859987"}}),e._v(" "),t("h3",{attrs:{id:"model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#model"}},[e._v("#")]),e._v(" Model")]),e._v(" "),t("p",[e._v("The model component stores data and related logic. It represents data that is being transferred between controller components or any other related business logic.")]),e._v(" "),t("p",[e._v("For example, a Controller object helps you to retrieve the customer info from the database. It manipulates data and sends it back to the database or use it to render the same data.")]),e._v(" "),t("h3",{attrs:{id:"view"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#view"}},[e._v("#")]),e._v(" View")]),e._v(" "),t("p",[e._v("A View is that part of the Application that represents the presentation of data. Views are created by the data gathered from the model data. A view requests the Model to give information so that it resents the output to the user.")]),e._v(" "),t("p",[e._v("The View also represents the data from charts, diagrams, and table. For example, any customer view will include all the UI components like text boxes, dropdowns, etc.")]),e._v(" "),t("h3",{attrs:{id:"controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[e._v("#")]),e._v(" Controller")]),e._v(" "),t("p",[e._v("The Controller is that part of the Application that handles the user interaction. The Controller interprets the mouse and keyboard inputs from the user, informing the Model and the View to change as appropriate.")]),e._v(" "),t("p",[e._v("A Controller sends commands to the Model to update its state(E.g., Saving a specific document). The Controller also sends commands to its associated view to change the View's presentation (For example, scrolling a particular document).")]),e._v(" "),t("p",[t("img",{attrs:{src:a(428),alt:"image-20201017174052159"}})]),e._v(" "),t("h3",{attrs:{id:"model-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#model-2"}},[e._v("#")]),e._v(" Model")]),e._v(" "),t("p",[e._v("The model stores data and related logic. It represents data that is being transferred between controller components or any other related business logic.")]),e._v(" "),t("p",[e._v("For example, a Controller object will retrieve the student info from the school database. It manipulates data and sends it back to the database or use it to render the same data.")]),e._v(" "),t("h3",{attrs:{id:"view-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#view-2"}},[e._v("#")]),e._v(" View:")]),e._v(" "),t("p",[e._v("The View stands for UI components like HTML, CSS, jQuery, etc. In MVVC pattern view is held responsible for displaying the data which is received from the Controller as an outcome. This View is also transformed Model (s) into the User Interface (UI).")]),e._v(" "),t("h3",{attrs:{id:"view-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#view-model"}},[e._v("#")]),e._v(" View Model:")]),e._v(" "),t("p",[e._v("The view model is responsible for presenting functions, commands, methods, to support the state of the View. It is also accountable to operate the model and activate the events in the View.")]),e._v(" "),t("h2",{attrs:{id:"difference-between-mvvm-and-mvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#difference-between-mvvm-and-mvc"}},[e._v("#")]),e._v(" Difference between MVVM and MVC")]),e._v(" "),t("p",[e._v("Here, are the important difference between MVVM and MVC")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[e._v("MVC")])]),e._v(" "),t("th",[t("strong",[e._v("MVVM")])])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("Controller is the entry point to the Application.")]),e._v(" "),t("td",[e._v("The view is the entry point to the Application.")])]),e._v(" "),t("tr",[t("td",[e._v("One to many relationships between Controller & View.")]),e._v(" "),t("td",[e._v("One to many relationships between View & View Model.")])]),e._v(" "),t("tr",[t("td",[e._v("View Does not have reference to the Controller")]),e._v(" "),t("td",[e._v("View have references to the View-Model.")])]),e._v(" "),t("tr",[t("td",[e._v("MVC is Old Model")]),e._v(" "),t("td",[e._v("MVVM is a relatively New Model.")])]),e._v(" "),t("tr",[t("td",[e._v("Difficult to read, change, to unit test, and reuse this Model")]),e._v(" "),t("td",[e._v("The debugging process will be complicated when we have complex data bindings.")])]),e._v(" "),t("tr",[t("td",[e._v("MVC Model component can be tested separately from the user")]),e._v(" "),t("td",[e._v("Easy for separate unit testing and code is event-driven.")])])])])])}),[],!1,null,null,null);t.default=s.exports}}]);